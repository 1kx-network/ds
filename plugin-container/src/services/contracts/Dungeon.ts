/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export type DungeonInfoStruct = {
  orderIndex: BigNumberish;
  enemies: string;
  traps: string;
  bossMonster: string;
  artefact: string;
  passageways: string;
  rooms: string;
  theSoulless: string;
  demiGod: string;
  hitPoints: BigNumberish[];
  isOpen: boolean;
  rank: BigNumberish;
  rewards: BigNumberish;
};

export type DungeonInfoStructOutput = [
  BigNumber,
  string,
  string,
  string,
  string,
  string,
  string,
  string,
  string,
  BigNumber[],
  boolean,
  BigNumber,
  BigNumber
] & {
  orderIndex: BigNumber;
  enemies: string;
  traps: string;
  bossMonster: string;
  artefact: string;
  passageways: string;
  rooms: string;
  theSoulless: string;
  demiGod: string;
  hitPoints: BigNumber[];
  isOpen: boolean;
  rank: BigNumber;
  rewards: BigNumber;
};

export interface DungeonInterface extends utils.Interface {
  functions: {
    "_dungeons(uint256)": FunctionFragment;
    "_relicAwardsByDungeonRank(uint256)": FunctionFragment;
    "claimRewards(uint256[])": FunctionFragment;
    "getAdditionalAttributes(uint256,bytes12)": FunctionFragment;
    "getArtefact(uint256)": FunctionFragment;
    "getBossMonster(uint256)": FunctionFragment;
    "getDemiGod(uint256)": FunctionFragment;
    "getDungeonCount()": FunctionFragment;
    "getDungeonOpen(uint256)": FunctionFragment;
    "getDungeonOrderIndex(uint256)": FunctionFragment;
    "getDungeonRank(uint256)": FunctionFragment;
    "getDungeonRemainingHitPoints(uint256)": FunctionFragment;
    "getDungeonRewardToken(uint256)": FunctionFragment;
    "getDungeons()": FunctionFragment;
    "getEnemies(uint256)": FunctionFragment;
    "getImageBaseURL()": FunctionFragment;
    "getPassageways(uint256)": FunctionFragment;
    "getRaidHitPoints(uint256,uint256)": FunctionFragment;
    "getRewardsForToken(uint256)": FunctionFragment;
    "getRewardsForTokens(uint256[])": FunctionFragment;
    "getRooms(uint256)": FunctionFragment;
    "getTheSoulless(uint256)": FunctionFragment;
    "getTokenOrderIndex(uint256,bytes12)": FunctionFragment;
    "getTokenProvenance(uint256,bytes12)": FunctionFragment;
    "getTraps(uint256)": FunctionFragment;
    "imageBaseURL()": FunctionFragment;
    "numDungeons()": FunctionFragment;
    "owner()": FunctionFragment;
    "placeholderImageBaseURL()": FunctionFragment;
    "raidDungeon(uint256,uint256)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setImageBaseURL(string)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "_dungeons",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "_relicAwardsByDungeonRank",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "claimRewards",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getAdditionalAttributes",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getArtefact",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getBossMonster",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getDemiGod",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getDungeonCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getDungeonOpen",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getDungeonOrderIndex",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getDungeonRank",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getDungeonRemainingHitPoints",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getDungeonRewardToken",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getDungeons",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getEnemies",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getImageBaseURL",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPassageways",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRaidHitPoints",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRewardsForToken",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRewardsForTokens",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getRooms",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTheSoulless",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenOrderIndex",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenProvenance",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getTraps",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "imageBaseURL",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "numDungeons",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "placeholderImageBaseURL",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "raidDungeon",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setImageBaseURL",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;

  decodeFunctionResult(functionFragment: "_dungeons", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "_relicAwardsByDungeonRank",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAdditionalAttributes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getArtefact",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBossMonster",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getDemiGod", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getDungeonCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDungeonOpen",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDungeonOrderIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDungeonRank",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDungeonRemainingHitPoints",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDungeonRewardToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDungeons",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getEnemies", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getImageBaseURL",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPassageways",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRaidHitPoints",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRewardsForToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRewardsForTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getRooms", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getTheSoulless",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenOrderIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenProvenance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getTraps", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "imageBaseURL",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "numDungeons",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "placeholderImageBaseURL",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "raidDungeon",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setImageBaseURL",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
    "Raid(uint256,uint256,uint256[8])": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Raid"): EventFragment;
}

export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  { previousOwner: string; newOwner: string }
>;

export type OwnershipTransferredEventFilter = TypedEventFilter<OwnershipTransferredEvent>;

export type RaidEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber[]],
  { dungeonId: BigNumber; raidTokenId: BigNumber; damage: BigNumber[] }
>;

export type RaidEventFilter = TypedEventFilter<RaidEvent>;

export interface Dungeon extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: DungeonInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    _dungeons(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    _relicAwardsByDungeonRank(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    claimRewards(
      tokenIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getAdditionalAttributes(
      arg0: BigNumberish,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getArtefact(
      dungeonId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getBossMonster(
      dungeonId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getDemiGod(
      dungeonId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getDungeonCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    getDungeonOpen(
      dungeonId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    getDungeonOrderIndex(
      dungeonId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getDungeonRank(
      dungeonId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { rank: BigNumber }>;

    getDungeonRemainingHitPoints(
      dungeonId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]] & { hitPoints: BigNumber[] }>;

    getDungeonRewardToken(
      dungeonId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getDungeons(
      overrides?: CallOverrides
    ): Promise<[DungeonInfoStructOutput[]]>;

    getEnemies(
      dungeonId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getImageBaseURL(overrides?: CallOverrides): Promise<[string]>;

    getPassageways(
      dungeonId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getRaidHitPoints(
      dungeonId: BigNumberish,
      lootToken: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    getRewardsForToken(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        dungeonId: BigNumber;
        rewardFirstId: BigNumber;
        rewardCount: BigNumber;
      }
    >;

    getRewardsForTokens(
      tokenIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<
      [BigNumber[], BigNumber[], BigNumber[]] & {
        dungeonId: BigNumber[];
        rewardFirstId: BigNumber[];
        rewardCount: BigNumber[];
      }
    >;

    getRooms(
      dungeonId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getTheSoulless(
      dungeonId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getTokenOrderIndex(
      arg0: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getTokenProvenance(
      arg0: BigNumberish,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getTraps(
      dungeonId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    imageBaseURL(overrides?: CallOverrides): Promise<[string]>;

    numDungeons(overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    placeholderImageBaseURL(overrides?: CallOverrides): Promise<[string]>;

    raidDungeon(
      dungeonId: BigNumberish,
      raidTokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setImageBaseURL(
      newImageBaseURL: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  _dungeons(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  _relicAwardsByDungeonRank(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  claimRewards(
    tokenIds: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getAdditionalAttributes(
    arg0: BigNumberish,
    arg1: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  getArtefact(
    dungeonId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getBossMonster(
    dungeonId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getDemiGod(
    dungeonId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getDungeonCount(overrides?: CallOverrides): Promise<BigNumber>;

  getDungeonOpen(
    dungeonId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  getDungeonOrderIndex(
    dungeonId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getDungeonRank(
    dungeonId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getDungeonRemainingHitPoints(
    dungeonId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  getDungeonRewardToken(
    dungeonId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getDungeons(overrides?: CallOverrides): Promise<DungeonInfoStructOutput[]>;

  getEnemies(
    dungeonId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getImageBaseURL(overrides?: CallOverrides): Promise<string>;

  getPassageways(
    dungeonId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getRaidHitPoints(
    dungeonId: BigNumberish,
    lootToken: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  getRewardsForToken(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      dungeonId: BigNumber;
      rewardFirstId: BigNumber;
      rewardCount: BigNumber;
    }
  >;

  getRewardsForTokens(
    tokenIds: BigNumberish[],
    overrides?: CallOverrides
  ): Promise<
    [BigNumber[], BigNumber[], BigNumber[]] & {
      dungeonId: BigNumber[];
      rewardFirstId: BigNumber[];
      rewardCount: BigNumber[];
    }
  >;

  getRooms(dungeonId: BigNumberish, overrides?: CallOverrides): Promise<string>;

  getTheSoulless(
    dungeonId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getTokenOrderIndex(
    arg0: BigNumberish,
    data: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getTokenProvenance(
    arg0: BigNumberish,
    arg1: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  getTraps(dungeonId: BigNumberish, overrides?: CallOverrides): Promise<string>;

  imageBaseURL(overrides?: CallOverrides): Promise<string>;

  numDungeons(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  placeholderImageBaseURL(overrides?: CallOverrides): Promise<string>;

  raidDungeon(
    dungeonId: BigNumberish,
    raidTokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setImageBaseURL(
    newImageBaseURL: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    _dungeons(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _relicAwardsByDungeonRank(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claimRewards(
      tokenIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    getAdditionalAttributes(
      arg0: BigNumberish,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    getArtefact(
      dungeonId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getBossMonster(
      dungeonId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getDemiGod(
      dungeonId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getDungeonCount(overrides?: CallOverrides): Promise<BigNumber>;

    getDungeonOpen(
      dungeonId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getDungeonOrderIndex(
      dungeonId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDungeonRank(
      dungeonId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDungeonRemainingHitPoints(
      dungeonId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getDungeonRewardToken(
      dungeonId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDungeons(overrides?: CallOverrides): Promise<DungeonInfoStructOutput[]>;

    getEnemies(
      dungeonId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getImageBaseURL(overrides?: CallOverrides): Promise<string>;

    getPassageways(
      dungeonId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getRaidHitPoints(
      dungeonId: BigNumberish,
      lootToken: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getRewardsForToken(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        dungeonId: BigNumber;
        rewardFirstId: BigNumber;
        rewardCount: BigNumber;
      }
    >;

    getRewardsForTokens(
      tokenIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<
      [BigNumber[], BigNumber[], BigNumber[]] & {
        dungeonId: BigNumber[];
        rewardFirstId: BigNumber[];
        rewardCount: BigNumber[];
      }
    >;

    getRooms(
      dungeonId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getTheSoulless(
      dungeonId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getTokenOrderIndex(
      arg0: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTokenProvenance(
      arg0: BigNumberish,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    getTraps(
      dungeonId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    imageBaseURL(overrides?: CallOverrides): Promise<string>;

    numDungeons(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    placeholderImageBaseURL(overrides?: CallOverrides): Promise<string>;

    raidDungeon(
      dungeonId: BigNumberish,
      raidTokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setImageBaseURL(
      newImageBaseURL: string,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "Raid(uint256,uint256,uint256[8])"(
      dungeonId?: BigNumberish | null,
      raidTokenId?: null,
      damage?: null
    ): RaidEventFilter;
    Raid(
      dungeonId?: BigNumberish | null,
      raidTokenId?: null,
      damage?: null
    ): RaidEventFilter;
  };

  estimateGas: {
    _dungeons(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _relicAwardsByDungeonRank(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claimRewards(
      tokenIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getAdditionalAttributes(
      arg0: BigNumberish,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getArtefact(
      dungeonId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBossMonster(
      dungeonId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDemiGod(
      dungeonId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDungeonCount(overrides?: CallOverrides): Promise<BigNumber>;

    getDungeonOpen(
      dungeonId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDungeonOrderIndex(
      dungeonId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDungeonRank(
      dungeonId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDungeonRemainingHitPoints(
      dungeonId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDungeonRewardToken(
      dungeonId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDungeons(overrides?: CallOverrides): Promise<BigNumber>;

    getEnemies(
      dungeonId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getImageBaseURL(overrides?: CallOverrides): Promise<BigNumber>;

    getPassageways(
      dungeonId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRaidHitPoints(
      dungeonId: BigNumberish,
      lootToken: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRewardsForToken(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRewardsForTokens(
      tokenIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRooms(
      dungeonId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTheSoulless(
      dungeonId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTokenOrderIndex(
      arg0: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTokenProvenance(
      arg0: BigNumberish,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTraps(
      dungeonId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    imageBaseURL(overrides?: CallOverrides): Promise<BigNumber>;

    numDungeons(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    placeholderImageBaseURL(overrides?: CallOverrides): Promise<BigNumber>;

    raidDungeon(
      dungeonId: BigNumberish,
      raidTokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setImageBaseURL(
      newImageBaseURL: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    _dungeons(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _relicAwardsByDungeonRank(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    claimRewards(
      tokenIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getAdditionalAttributes(
      arg0: BigNumberish,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getArtefact(
      dungeonId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBossMonster(
      dungeonId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDemiGod(
      dungeonId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDungeonCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getDungeonOpen(
      dungeonId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDungeonOrderIndex(
      dungeonId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDungeonRank(
      dungeonId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDungeonRemainingHitPoints(
      dungeonId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDungeonRewardToken(
      dungeonId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDungeons(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getEnemies(
      dungeonId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getImageBaseURL(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPassageways(
      dungeonId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRaidHitPoints(
      dungeonId: BigNumberish,
      lootToken: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRewardsForToken(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRewardsForTokens(
      tokenIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRooms(
      dungeonId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTheSoulless(
      dungeonId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTokenOrderIndex(
      arg0: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTokenProvenance(
      arg0: BigNumberish,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTraps(
      dungeonId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    imageBaseURL(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    numDungeons(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    placeholderImageBaseURL(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    raidDungeon(
      dungeonId: BigNumberish,
      raidTokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setImageBaseURL(
      newImageBaseURL: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}

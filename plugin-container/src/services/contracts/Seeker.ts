/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export type SeekerDataStruct = {
  id: BigNumberish;
  image: string;
  generation: BigNumberish;
  strength: BigNumberish;
  toughness: BigNumberish;
  dexterity: BigNumberish;
  speed: BigNumberish;
  vitality: BigNumberish;
  endurance: BigNumberish;
  orderId: BigNumberish;
  corruption: BigNumberish;
  order: string;
  origin: string;
  element: string;
  phase: string;
  affinity: string;
  virtue: string;
  vice: string;
  age: BigNumberish;
  composition: BigNumberish;
};

export type SeekerDataStructOutput = [
  BigNumber,
  string,
  BigNumber,
  number,
  number,
  number,
  number,
  number,
  number,
  number,
  number,
  string,
  string,
  string,
  string,
  string,
  string,
  string,
  number,
  number
] & {
  id: BigNumber;
  image: string;
  generation: BigNumber;
  strength: number;
  toughness: number;
  dexterity: number;
  speed: number;
  vitality: number;
  endurance: number;
  orderId: number;
  corruption: number;
  order: string;
  origin: string;
  element: string;
  phase: string;
  affinity: string;
  virtue: string;
  vice: string;
  age: number;
  composition: number;
};

export interface SeekerInterface extends utils.Interface {
  functions: {
    "ERC712_VERSION()": FunctionFragment;
    "_attrs(uint256)": FunctionFragment;
    "_collectionDesc()": FunctionFragment;
    "_collectionExtURL()": FunctionFragment;
    "_collectionImgURL()": FunctionFragment;
    "_collectionName()": FunctionFragment;
    "_count()": FunctionFragment;
    "_feeBasisPoints()": FunctionFragment;
    "_feeRecipient()": FunctionFragment;
    "_imageBaseURL()": FunctionFragment;
    "_maxMintable(uint256)": FunctionFragment;
    "_totalMinted(uint256)": FunctionFragment;
    "addWhitelistedContract(address)": FunctionFragment;
    "admin()": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "contractURI()": FunctionFragment;
    "executeMetaTransaction(address,bytes,bytes32,bytes32,uint8)": FunctionFragment;
    "exists(uint256)": FunctionFragment;
    "getAffinities()": FunctionFragment;
    "getApproved(uint256)": FunctionFragment;
    "getChainId()": FunctionFragment;
    "getData(uint256)": FunctionFragment;
    "getDomainSeperator()": FunctionFragment;
    "getElements()": FunctionFragment;
    "getImplementation()": FunctionFragment;
    "getNonce(address)": FunctionFragment;
    "getOrders()": FunctionFragment;
    "getOrigins()": FunctionFragment;
    "getPhases()": FunctionFragment;
    "getVices()": FunctionFragment;
    "getVirtues()": FunctionFragment;
    "init(string,string,address,string,string,string,string,uint256,address,string)": FunctionFragment;
    "isApprovedForAll(address,address)": FunctionFragment;
    "isContractWhitelisted(address)": FunctionFragment;
    "mint(address,uint8,uint8[8])": FunctionFragment;
    "name()": FunctionFragment;
    "owner()": FunctionFragment;
    "ownerOf(uint256)": FunctionFragment;
    "removeWhitelistedContract(address)": FunctionFragment;
    "renounceAdminPowers()": FunctionFragment;
    "safeTransferFrom(address,address,uint256)": FunctionFragment;
    "setAdmin(address)": FunctionFragment;
    "setApprovalForAll(address,bool)": FunctionFragment;
    "setCollectionDesc(string)": FunctionFragment;
    "setCollectionExtURL(string)": FunctionFragment;
    "setCollectionImgURL(string)": FunctionFragment;
    "setCollectionName(string)": FunctionFragment;
    "setFeeBasisPoints(uint256)": FunctionFragment;
    "setFeeRecipient(address)": FunctionFragment;
    "setImageBaseURL(string)": FunctionFragment;
    "setImplementation(address)": FunctionFragment;
    "setMaxSupply(uint256,uint256)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "symbol()": FunctionFragment;
    "tokenURI(uint256)": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "ERC712_VERSION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_attrs",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "_collectionDesc",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_collectionExtURL",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_collectionImgURL",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_collectionName",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "_count", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "_feeBasisPoints",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_feeRecipient",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_imageBaseURL",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_maxMintable",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "_totalMinted",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "addWhitelistedContract",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "admin", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(
    functionFragment: "contractURI",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "executeMetaTransaction",
    values: [string, BytesLike, BytesLike, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "exists",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAffinities",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getApproved",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getChainId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getData",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getDomainSeperator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getElements",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getImplementation",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getNonce", values: [string]): string;
  encodeFunctionData(functionFragment: "getOrders", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getOrigins",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getPhases", values?: undefined): string;
  encodeFunctionData(functionFragment: "getVices", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getVirtues",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "init",
    values: [
      string,
      string,
      string,
      string,
      string,
      string,
      string,
      BigNumberish,
      string,
      string
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "isApprovedForAll",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "isContractWhitelisted",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "mint",
    values: [string, BigNumberish, BigNumberish[]]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ownerOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "removeWhitelistedContract",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceAdminPowers",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "setAdmin", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setApprovalForAll",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setCollectionDesc",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setCollectionExtURL",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setCollectionImgURL",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setCollectionName",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setFeeBasisPoints",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setFeeRecipient",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setImageBaseURL",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setImplementation",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxSupply",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tokenURI",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [string, string, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "ERC712_VERSION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "_attrs", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "_collectionDesc",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_collectionExtURL",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_collectionImgURL",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_collectionName",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "_count", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "_feeBasisPoints",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_feeRecipient",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_imageBaseURL",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_maxMintable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_totalMinted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addWhitelistedContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "admin", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "contractURI",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeMetaTransaction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "exists", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAffinities",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getApproved",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getChainId", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getData", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getDomainSeperator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getElements",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getImplementation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getNonce", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getOrders", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getOrigins", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getPhases", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getVices", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getVirtues", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "init", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isApprovedForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isContractWhitelisted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ownerOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeWhitelistedContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceAdminPowers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setAdmin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setApprovalForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCollectionDesc",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCollectionExtURL",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCollectionImgURL",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCollectionName",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFeeBasisPoints",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFeeRecipient",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setImageBaseURL",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setImplementation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tokenURI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;

  events: {
    "Approval(address,address,uint256)": EventFragment;
    "ApprovalForAll(address,address,bool)": EventFragment;
    "MetaTransactionExecuted(address,address,bytes)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ApprovalForAll"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MetaTransactionExecuted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
}

export type ApprovalEvent = TypedEvent<
  [string, string, BigNumber],
  { owner: string; approved: string; tokenId: BigNumber }
>;

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;

export type ApprovalForAllEvent = TypedEvent<
  [string, string, boolean],
  { owner: string; operator: string; approved: boolean }
>;

export type ApprovalForAllEventFilter = TypedEventFilter<ApprovalForAllEvent>;

export type MetaTransactionExecutedEvent = TypedEvent<
  [string, string, string],
  { userAddress: string; relayerAddress: string; functionSignature: string }
>;

export type MetaTransactionExecutedEventFilter = TypedEventFilter<MetaTransactionExecutedEvent>;

export type TransferEvent = TypedEvent<
  [string, string, BigNumber],
  { from: string; to: string; tokenId: BigNumber }
>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export interface Seeker extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: SeekerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    ERC712_VERSION(overrides?: CallOverrides): Promise<[string]>;

    _attrs(arg0: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber]>;

    _collectionDesc(overrides?: CallOverrides): Promise<[string]>;

    _collectionExtURL(overrides?: CallOverrides): Promise<[string]>;

    _collectionImgURL(overrides?: CallOverrides): Promise<[string]>;

    _collectionName(overrides?: CallOverrides): Promise<[string]>;

    _count(overrides?: CallOverrides): Promise<[BigNumber]>;

    _feeBasisPoints(overrides?: CallOverrides): Promise<[BigNumber]>;

    _feeRecipient(overrides?: CallOverrides): Promise<[string]>;

    _imageBaseURL(overrides?: CallOverrides): Promise<[string]>;

    _maxMintable(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    _totalMinted(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    addWhitelistedContract(
      addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    admin(overrides?: CallOverrides): Promise<[string]>;

    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    contractURI(overrides?: CallOverrides): Promise<[string]>;

    executeMetaTransaction(
      userAddress: string,
      functionSignature: BytesLike,
      sigR: BytesLike,
      sigS: BytesLike,
      sigV: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    exists(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    getAffinities(overrides?: CallOverrides): Promise<[string[]]>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getChainId(overrides?: CallOverrides): Promise<[BigNumber]>;

    getData(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[SeekerDataStructOutput] & { data: SeekerDataStructOutput }>;

    getDomainSeperator(overrides?: CallOverrides): Promise<[string]>;

    getElements(overrides?: CallOverrides): Promise<[string[]]>;

    getImplementation(overrides?: CallOverrides): Promise<[string]>;

    getNonce(
      user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { nonce: BigNumber }>;

    getOrders(overrides?: CallOverrides): Promise<[string[]]>;

    getOrigins(overrides?: CallOverrides): Promise<[string[]]>;

    getPhases(
      overrides?: CallOverrides
    ): Promise<[[string, string, string, string]]>;

    getVices(overrides?: CallOverrides): Promise<[string[]]>;

    getVirtues(overrides?: CallOverrides): Promise<[string[]]>;

    init(
      name: string,
      symbol: string,
      proxyRegistryAddress: string,
      collectionName: string,
      collectionDesc: string,
      collectionImgURL: string,
      collectionExtURL: string,
      feeBasisPoints: BigNumberish,
      feeRecipient: string,
      imageBaseURL: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isContractWhitelisted(
      addr: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    mint(
      to: string,
      generation: BigNumberish,
      attrs: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    name(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    ownerOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    removeWhitelistedContract(
      addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceAdminPowers(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setAdmin(
      newAdmin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setCollectionDesc(
      collectionDesc: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setCollectionExtURL(
      collectionExtURL: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setCollectionImgURL(
      collectionImgURL: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setCollectionName(
      collectionName: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setFeeBasisPoints(
      feeBasisPoints: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setFeeRecipient(
      feeRecipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setImageBaseURL(
      newImageBaseURL: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setImplementation(
      implementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMaxSupply(
      generation: BigNumberish,
      maxMintable: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    tokenURI(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  ERC712_VERSION(overrides?: CallOverrides): Promise<string>;

  _attrs(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  _collectionDesc(overrides?: CallOverrides): Promise<string>;

  _collectionExtURL(overrides?: CallOverrides): Promise<string>;

  _collectionImgURL(overrides?: CallOverrides): Promise<string>;

  _collectionName(overrides?: CallOverrides): Promise<string>;

  _count(overrides?: CallOverrides): Promise<BigNumber>;

  _feeBasisPoints(overrides?: CallOverrides): Promise<BigNumber>;

  _feeRecipient(overrides?: CallOverrides): Promise<string>;

  _imageBaseURL(overrides?: CallOverrides): Promise<string>;

  _maxMintable(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  _totalMinted(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  addWhitelistedContract(
    addr: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  admin(overrides?: CallOverrides): Promise<string>;

  approve(
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

  contractURI(overrides?: CallOverrides): Promise<string>;

  executeMetaTransaction(
    userAddress: string,
    functionSignature: BytesLike,
    sigR: BytesLike,
    sigS: BytesLike,
    sigV: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  exists(tokenId: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

  getAffinities(overrides?: CallOverrides): Promise<string[]>;

  getApproved(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getChainId(overrides?: CallOverrides): Promise<BigNumber>;

  getData(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<SeekerDataStructOutput>;

  getDomainSeperator(overrides?: CallOverrides): Promise<string>;

  getElements(overrides?: CallOverrides): Promise<string[]>;

  getImplementation(overrides?: CallOverrides): Promise<string>;

  getNonce(user: string, overrides?: CallOverrides): Promise<BigNumber>;

  getOrders(overrides?: CallOverrides): Promise<string[]>;

  getOrigins(overrides?: CallOverrides): Promise<string[]>;

  getPhases(
    overrides?: CallOverrides
  ): Promise<[string, string, string, string]>;

  getVices(overrides?: CallOverrides): Promise<string[]>;

  getVirtues(overrides?: CallOverrides): Promise<string[]>;

  init(
    name: string,
    symbol: string,
    proxyRegistryAddress: string,
    collectionName: string,
    collectionDesc: string,
    collectionImgURL: string,
    collectionExtURL: string,
    feeBasisPoints: BigNumberish,
    feeRecipient: string,
    imageBaseURL: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isApprovedForAll(
    owner: string,
    operator: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isContractWhitelisted(
    addr: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  mint(
    to: string,
    generation: BigNumberish,
    attrs: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  name(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  ownerOf(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

  removeWhitelistedContract(
    addr: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceAdminPowers(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "safeTransferFrom(address,address,uint256)"(
    from: string,
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "safeTransferFrom(address,address,uint256,bytes)"(
    from: string,
    to: string,
    tokenId: BigNumberish,
    _data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setAdmin(
    newAdmin: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setApprovalForAll(
    operator: string,
    approved: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setCollectionDesc(
    collectionDesc: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setCollectionExtURL(
    collectionExtURL: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setCollectionImgURL(
    collectionImgURL: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setCollectionName(
    collectionName: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setFeeBasisPoints(
    feeBasisPoints: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setFeeRecipient(
    feeRecipient: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setImageBaseURL(
    newImageBaseURL: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setImplementation(
    implementation: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMaxSupply(
    generation: BigNumberish,
    maxMintable: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  symbol(overrides?: CallOverrides): Promise<string>;

  tokenURI(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

  transferFrom(
    from: string,
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    ERC712_VERSION(overrides?: CallOverrides): Promise<string>;

    _attrs(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    _collectionDesc(overrides?: CallOverrides): Promise<string>;

    _collectionExtURL(overrides?: CallOverrides): Promise<string>;

    _collectionImgURL(overrides?: CallOverrides): Promise<string>;

    _collectionName(overrides?: CallOverrides): Promise<string>;

    _count(overrides?: CallOverrides): Promise<BigNumber>;

    _feeBasisPoints(overrides?: CallOverrides): Promise<BigNumber>;

    _feeRecipient(overrides?: CallOverrides): Promise<string>;

    _imageBaseURL(overrides?: CallOverrides): Promise<string>;

    _maxMintable(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _totalMinted(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    addWhitelistedContract(
      addr: string,
      overrides?: CallOverrides
    ): Promise<void>;

    admin(overrides?: CallOverrides): Promise<string>;

    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    contractURI(overrides?: CallOverrides): Promise<string>;

    executeMetaTransaction(
      userAddress: string,
      functionSignature: BytesLike,
      sigR: BytesLike,
      sigS: BytesLike,
      sigV: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    exists(tokenId: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

    getAffinities(overrides?: CallOverrides): Promise<string[]>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getChainId(overrides?: CallOverrides): Promise<BigNumber>;

    getData(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<SeekerDataStructOutput>;

    getDomainSeperator(overrides?: CallOverrides): Promise<string>;

    getElements(overrides?: CallOverrides): Promise<string[]>;

    getImplementation(overrides?: CallOverrides): Promise<string>;

    getNonce(user: string, overrides?: CallOverrides): Promise<BigNumber>;

    getOrders(overrides?: CallOverrides): Promise<string[]>;

    getOrigins(overrides?: CallOverrides): Promise<string[]>;

    getPhases(
      overrides?: CallOverrides
    ): Promise<[string, string, string, string]>;

    getVices(overrides?: CallOverrides): Promise<string[]>;

    getVirtues(overrides?: CallOverrides): Promise<string[]>;

    init(
      name: string,
      symbol: string,
      proxyRegistryAddress: string,
      collectionName: string,
      collectionDesc: string,
      collectionImgURL: string,
      collectionExtURL: string,
      feeBasisPoints: BigNumberish,
      feeRecipient: string,
      imageBaseURL: string,
      overrides?: CallOverrides
    ): Promise<void>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isContractWhitelisted(
      addr: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    mint(
      to: string,
      generation: BigNumberish,
      attrs: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    ownerOf(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

    removeWhitelistedContract(
      addr: string,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceAdminPowers(overrides?: CallOverrides): Promise<void>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    setAdmin(newAdmin: string, overrides?: CallOverrides): Promise<void>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setCollectionDesc(
      collectionDesc: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setCollectionExtURL(
      collectionExtURL: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setCollectionImgURL(
      collectionImgURL: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setCollectionName(
      collectionName: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setFeeBasisPoints(
      feeBasisPoints: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setFeeRecipient(
      feeRecipient: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setImageBaseURL(
      newImageBaseURL: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setImplementation(
      implementation: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setMaxSupply(
      generation: BigNumberish,
      maxMintable: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    symbol(overrides?: CallOverrides): Promise<string>;

    tokenURI(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "Approval(address,address,uint256)"(
      owner?: string | null,
      approved?: string | null,
      tokenId?: BigNumberish | null
    ): ApprovalEventFilter;
    Approval(
      owner?: string | null,
      approved?: string | null,
      tokenId?: BigNumberish | null
    ): ApprovalEventFilter;

    "ApprovalForAll(address,address,bool)"(
      owner?: string | null,
      operator?: string | null,
      approved?: null
    ): ApprovalForAllEventFilter;
    ApprovalForAll(
      owner?: string | null,
      operator?: string | null,
      approved?: null
    ): ApprovalForAllEventFilter;

    "MetaTransactionExecuted(address,address,bytes)"(
      userAddress?: null,
      relayerAddress?: null,
      functionSignature?: null
    ): MetaTransactionExecutedEventFilter;
    MetaTransactionExecuted(
      userAddress?: null,
      relayerAddress?: null,
      functionSignature?: null
    ): MetaTransactionExecutedEventFilter;

    "Transfer(address,address,uint256)"(
      from?: string | null,
      to?: string | null,
      tokenId?: BigNumberish | null
    ): TransferEventFilter;
    Transfer(
      from?: string | null,
      to?: string | null,
      tokenId?: BigNumberish | null
    ): TransferEventFilter;
  };

  estimateGas: {
    ERC712_VERSION(overrides?: CallOverrides): Promise<BigNumber>;

    _attrs(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    _collectionDesc(overrides?: CallOverrides): Promise<BigNumber>;

    _collectionExtURL(overrides?: CallOverrides): Promise<BigNumber>;

    _collectionImgURL(overrides?: CallOverrides): Promise<BigNumber>;

    _collectionName(overrides?: CallOverrides): Promise<BigNumber>;

    _count(overrides?: CallOverrides): Promise<BigNumber>;

    _feeBasisPoints(overrides?: CallOverrides): Promise<BigNumber>;

    _feeRecipient(overrides?: CallOverrides): Promise<BigNumber>;

    _imageBaseURL(overrides?: CallOverrides): Promise<BigNumber>;

    _maxMintable(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _totalMinted(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    addWhitelistedContract(
      addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    admin(overrides?: CallOverrides): Promise<BigNumber>;

    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    contractURI(overrides?: CallOverrides): Promise<BigNumber>;

    executeMetaTransaction(
      userAddress: string,
      functionSignature: BytesLike,
      sigR: BytesLike,
      sigS: BytesLike,
      sigV: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    exists(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAffinities(overrides?: CallOverrides): Promise<BigNumber>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getChainId(overrides?: CallOverrides): Promise<BigNumber>;

    getData(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDomainSeperator(overrides?: CallOverrides): Promise<BigNumber>;

    getElements(overrides?: CallOverrides): Promise<BigNumber>;

    getImplementation(overrides?: CallOverrides): Promise<BigNumber>;

    getNonce(user: string, overrides?: CallOverrides): Promise<BigNumber>;

    getOrders(overrides?: CallOverrides): Promise<BigNumber>;

    getOrigins(overrides?: CallOverrides): Promise<BigNumber>;

    getPhases(overrides?: CallOverrides): Promise<BigNumber>;

    getVices(overrides?: CallOverrides): Promise<BigNumber>;

    getVirtues(overrides?: CallOverrides): Promise<BigNumber>;

    init(
      name: string,
      symbol: string,
      proxyRegistryAddress: string,
      collectionName: string,
      collectionDesc: string,
      collectionImgURL: string,
      collectionExtURL: string,
      feeBasisPoints: BigNumberish,
      feeRecipient: string,
      imageBaseURL: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isContractWhitelisted(
      addr: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mint(
      to: string,
      generation: BigNumberish,
      attrs: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    ownerOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    removeWhitelistedContract(
      addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceAdminPowers(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setAdmin(
      newAdmin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setCollectionDesc(
      collectionDesc: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setCollectionExtURL(
      collectionExtURL: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setCollectionImgURL(
      collectionImgURL: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setCollectionName(
      collectionName: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setFeeBasisPoints(
      feeBasisPoints: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setFeeRecipient(
      feeRecipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setImageBaseURL(
      newImageBaseURL: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setImplementation(
      implementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMaxSupply(
      generation: BigNumberish,
      maxMintable: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    tokenURI(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    ERC712_VERSION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _attrs(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _collectionDesc(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _collectionExtURL(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _collectionImgURL(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _collectionName(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _count(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _feeBasisPoints(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _feeRecipient(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _imageBaseURL(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _maxMintable(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _totalMinted(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    addWhitelistedContract(
      addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    admin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    balanceOf(
      owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    contractURI(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    executeMetaTransaction(
      userAddress: string,
      functionSignature: BytesLike,
      sigR: BytesLike,
      sigS: BytesLike,
      sigV: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    exists(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAffinities(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getChainId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getData(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDomainSeperator(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getElements(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getImplementation(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getNonce(
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getOrders(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getOrigins(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPhases(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getVices(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getVirtues(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    init(
      name: string,
      symbol: string,
      proxyRegistryAddress: string,
      collectionName: string,
      collectionDesc: string,
      collectionImgURL: string,
      collectionExtURL: string,
      feeBasisPoints: BigNumberish,
      feeRecipient: string,
      imageBaseURL: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isContractWhitelisted(
      addr: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mint(
      to: string,
      generation: BigNumberish,
      attrs: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ownerOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    removeWhitelistedContract(
      addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceAdminPowers(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setAdmin(
      newAdmin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setCollectionDesc(
      collectionDesc: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setCollectionExtURL(
      collectionExtURL: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setCollectionImgURL(
      collectionImgURL: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setCollectionName(
      collectionName: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setFeeBasisPoints(
      feeBasisPoints: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setFeeRecipient(
      feeRecipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setImageBaseURL(
      newImageBaseURL: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setImplementation(
      implementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMaxSupply(
      generation: BigNumberish,
      maxMintable: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenURI(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}

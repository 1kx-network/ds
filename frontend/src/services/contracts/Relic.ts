/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export type RelicPropertiesStruct = {
  relicTypeId: BigNumberish;
  materialId: BigNumberish;
  materialOffset: BigNumberish;
  poleId: BigNumberish;
  astralId: BigNumberish;
  elementId: BigNumberish;
  alignmentId: BigNumberish;
  greatness: BigNumberish;
};

export type RelicPropertiesStructOutput = [
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber
] & {
  relicTypeId: BigNumber;
  materialId: BigNumber;
  materialOffset: BigNumber;
  poleId: BigNumber;
  astralId: BigNumber;
  elementId: BigNumber;
  alignmentId: BigNumber;
  greatness: BigNumber;
};

export interface RelicInterface extends utils.Interface {
  functions: {
    "ERC712_VERSION()": FunctionFragment;
    "_animationBaseURL()": FunctionFragment;
    "_collectionDesc()": FunctionFragment;
    "_collectionExtURL()": FunctionFragment;
    "_collectionImgURL()": FunctionFragment;
    "_collectionName()": FunctionFragment;
    "_feeBasisPoints()": FunctionFragment;
    "_feeRecipient()": FunctionFragment;
    "_getAttributes((uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256))": FunctionFragment;
    "_getURLParams((uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256))": FunctionFragment;
    "_placeholderImageURL()": FunctionFragment;
    "_tokenMintInfo(uint256)": FunctionFragment;
    "addWhitelistedMinter(address)": FunctionFragment;
    "admin()": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "burn(uint256)": FunctionFragment;
    "contractURI()": FunctionFragment;
    "executeMetaTransaction(address,bytes,bytes32,bytes32,uint8)": FunctionFragment;
    "exists(uint256)": FunctionFragment;
    "getAlignment(uint256)": FunctionFragment;
    "getApproved(uint256)": FunctionFragment;
    "getAstral(uint256)": FunctionFragment;
    "getChainId()": FunctionFragment;
    "getDomainSeperator()": FunctionFragment;
    "getElement(uint256)": FunctionFragment;
    "getImplementation()": FunctionFragment;
    "getMaterial(uint256)": FunctionFragment;
    "getMiniumGreatness(uint256)": FunctionFragment;
    "getName(uint256,uint256,uint256)": FunctionFragment;
    "getNonce(address)": FunctionFragment;
    "getOrderIndex(uint256)": FunctionFragment;
    "getOrderSuffix(uint256)": FunctionFragment;
    "getPole(uint256)": FunctionFragment;
    "getRelicProperties(uint256)": FunctionFragment;
    "getRelicType(uint256)": FunctionFragment;
    "init(string,string,address,string,string,string,string,string,string,uint256,address)": FunctionFragment;
    "isApprovedForAll(address,address)": FunctionFragment;
    "isMinterWhitelisted(address)": FunctionFragment;
    "mint(address,uint256,bytes12)": FunctionFragment;
    "name()": FunctionFragment;
    "owner()": FunctionFragment;
    "ownerOf(uint256)": FunctionFragment;
    "packTokenMintInfo(address,bytes12)": FunctionFragment;
    "removeWhitelistedMinter(address)": FunctionFragment;
    "renounceAdminPowers()": FunctionFragment;
    "safeTransferFrom(address,address,uint256)": FunctionFragment;
    "setAdmin(address)": FunctionFragment;
    "setAnimationBaseURL(string)": FunctionFragment;
    "setApprovalForAll(address,bool)": FunctionFragment;
    "setCollectionDesc(string)": FunctionFragment;
    "setCollectionExtURL(string)": FunctionFragment;
    "setCollectionImgURL(string)": FunctionFragment;
    "setCollectionName(string)": FunctionFragment;
    "setFeeBasisPoints(uint256)": FunctionFragment;
    "setFeeRecipient(address)": FunctionFragment;
    "setImplementation(address)": FunctionFragment;
    "setPlaceholderImageURL(string)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "symbol()": FunctionFragment;
    "tokenURI(uint256)": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "unpackTokenMintInfo(uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "ERC712_VERSION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_animationBaseURL",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_collectionDesc",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_collectionExtURL",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_collectionImgURL",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_collectionName",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_feeBasisPoints",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_feeRecipient",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_getAttributes",
    values: [RelicPropertiesStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "_getURLParams",
    values: [RelicPropertiesStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "_placeholderImageURL",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_tokenMintInfo",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "addWhitelistedMinter",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "admin", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(functionFragment: "burn", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "contractURI",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "executeMetaTransaction",
    values: [string, BytesLike, BytesLike, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "exists",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAlignment",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getApproved",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAstral",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getChainId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getDomainSeperator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getElement",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getImplementation",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMaterial",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getMiniumGreatness",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getName",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "getNonce", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getOrderIndex",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getOrderSuffix",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPole",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRelicProperties",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRelicType",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "init",
    values: [
      string,
      string,
      string,
      string,
      string,
      string,
      string,
      string,
      string,
      BigNumberish,
      string
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "isApprovedForAll",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "isMinterWhitelisted",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "mint",
    values: [string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ownerOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "packTokenMintInfo",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "removeWhitelistedMinter",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceAdminPowers",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "setAdmin", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setAnimationBaseURL",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setApprovalForAll",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setCollectionDesc",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setCollectionExtURL",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setCollectionImgURL",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setCollectionName",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setFeeBasisPoints",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setFeeRecipient",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setImplementation",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setPlaceholderImageURL",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tokenURI",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "unpackTokenMintInfo",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "ERC712_VERSION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_animationBaseURL",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_collectionDesc",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_collectionExtURL",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_collectionImgURL",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_collectionName",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_feeBasisPoints",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_feeRecipient",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_getAttributes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_getURLParams",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_placeholderImageURL",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_tokenMintInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addWhitelistedMinter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "admin", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "burn", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "contractURI",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeMetaTransaction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "exists", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAlignment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getApproved",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getAstral", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getChainId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getDomainSeperator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getElement", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getImplementation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMaterial",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMiniumGreatness",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getName", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getNonce", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getOrderIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOrderSuffix",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getPole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getRelicProperties",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRelicType",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "init", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isApprovedForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isMinterWhitelisted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ownerOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "packTokenMintInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeWhitelistedMinter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceAdminPowers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setAdmin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setAnimationBaseURL",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setApprovalForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCollectionDesc",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCollectionExtURL",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCollectionImgURL",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCollectionName",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFeeBasisPoints",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFeeRecipient",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setImplementation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPlaceholderImageURL",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tokenURI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unpackTokenMintInfo",
    data: BytesLike
  ): Result;

  events: {
    "Approval(address,address,uint256)": EventFragment;
    "ApprovalForAll(address,address,bool)": EventFragment;
    "MetaTransactionExecuted(address,address,bytes)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ApprovalForAll"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MetaTransactionExecuted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
}

export type ApprovalEvent = TypedEvent<
  [string, string, BigNumber],
  { owner: string; approved: string; tokenId: BigNumber }
>;

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;

export type ApprovalForAllEvent = TypedEvent<
  [string, string, boolean],
  { owner: string; operator: string; approved: boolean }
>;

export type ApprovalForAllEventFilter = TypedEventFilter<ApprovalForAllEvent>;

export type MetaTransactionExecutedEvent = TypedEvent<
  [string, string, string],
  { userAddress: string; relayerAddress: string; functionSignature: string }
>;

export type MetaTransactionExecutedEventFilter = TypedEventFilter<MetaTransactionExecutedEvent>;

export type TransferEvent = TypedEvent<
  [string, string, BigNumber],
  { from: string; to: string; tokenId: BigNumber }
>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export interface Relic extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: RelicInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    ERC712_VERSION(overrides?: CallOverrides): Promise<[string]>;

    _animationBaseURL(overrides?: CallOverrides): Promise<[string]>;

    _collectionDesc(overrides?: CallOverrides): Promise<[string]>;

    _collectionExtURL(overrides?: CallOverrides): Promise<[string]>;

    _collectionImgURL(overrides?: CallOverrides): Promise<[string]>;

    _collectionName(overrides?: CallOverrides): Promise<[string]>;

    _feeBasisPoints(overrides?: CallOverrides): Promise<[BigNumber]>;

    _feeRecipient(overrides?: CallOverrides): Promise<[string]>;

    _getAttributes(
      relicProps: RelicPropertiesStruct,
      overrides?: CallOverrides
    ): Promise<[string]>;

    _getURLParams(
      relicProps: RelicPropertiesStruct,
      overrides?: CallOverrides
    ): Promise<[string]>;

    _placeholderImageURL(overrides?: CallOverrides): Promise<[string]>;

    _tokenMintInfo(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    addWhitelistedMinter(
      minter: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    admin(overrides?: CallOverrides): Promise<[string]>;

    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    burn(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    contractURI(overrides?: CallOverrides): Promise<[string]>;

    executeMetaTransaction(
      userAddress: string,
      functionSignature: BytesLike,
      sigR: BytesLike,
      sigS: BytesLike,
      sigV: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    exists(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    getAlignment(
      alignmentId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getAstral(
      astralId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getChainId(overrides?: CallOverrides): Promise<[BigNumber]>;

    getDomainSeperator(overrides?: CallOverrides): Promise<[string]>;

    getElement(
      elementId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getImplementation(overrides?: CallOverrides): Promise<[string]>;

    getMaterial(
      materialId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getMiniumGreatness(
      relicId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getName(
      relicId: BigNumberish,
      materialId: BigNumberish,
      materialOffset: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getNonce(
      user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { nonce: BigNumber }>;

    getOrderIndex(
      relicId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getOrderSuffix(
      orderId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getPole(poleId: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    getRelicProperties(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[RelicPropertiesStructOutput]>;

    getRelicType(
      relicId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    init(
      name: string,
      symbol: string,
      proxyRegistryAddress: string,
      placeholderImageURL: string,
      animationBaseURL: string,
      collectionName: string,
      collectionDesc: string,
      collectionImgURL: string,
      collectionExtURL: string,
      feeBasisPoints: BigNumberish,
      feeRecipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isMinterWhitelisted(
      minter: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    mint(
      to: string,
      tokenId: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    name(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    ownerOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    packTokenMintInfo(
      relicMinter: string,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    removeWhitelistedMinter(
      minter: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceAdminPowers(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setAdmin(
      newAdmin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setAnimationBaseURL(
      animationBaseURL: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setCollectionDesc(
      collectionDesc: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setCollectionExtURL(
      collectionExtURL: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setCollectionImgURL(
      collectionImgURL: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setCollectionName(
      collectionName: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setFeeBasisPoints(
      feeBasisPoints: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setFeeRecipient(
      feeRecipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setImplementation(
      implementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPlaceholderImageURL(
      placeholderImageURL: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    tokenURI(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unpackTokenMintInfo(
      mintInfo: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, string] & { relicMinter: string; data: string }>;
  };

  ERC712_VERSION(overrides?: CallOverrides): Promise<string>;

  _animationBaseURL(overrides?: CallOverrides): Promise<string>;

  _collectionDesc(overrides?: CallOverrides): Promise<string>;

  _collectionExtURL(overrides?: CallOverrides): Promise<string>;

  _collectionImgURL(overrides?: CallOverrides): Promise<string>;

  _collectionName(overrides?: CallOverrides): Promise<string>;

  _feeBasisPoints(overrides?: CallOverrides): Promise<BigNumber>;

  _feeRecipient(overrides?: CallOverrides): Promise<string>;

  _getAttributes(
    relicProps: RelicPropertiesStruct,
    overrides?: CallOverrides
  ): Promise<string>;

  _getURLParams(
    relicProps: RelicPropertiesStruct,
    overrides?: CallOverrides
  ): Promise<string>;

  _placeholderImageURL(overrides?: CallOverrides): Promise<string>;

  _tokenMintInfo(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  addWhitelistedMinter(
    minter: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  admin(overrides?: CallOverrides): Promise<string>;

  approve(
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

  burn(
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  contractURI(overrides?: CallOverrides): Promise<string>;

  executeMetaTransaction(
    userAddress: string,
    functionSignature: BytesLike,
    sigR: BytesLike,
    sigS: BytesLike,
    sigV: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  exists(tokenId: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

  getAlignment(
    alignmentId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getApproved(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getAstral(astralId: BigNumberish, overrides?: CallOverrides): Promise<string>;

  getChainId(overrides?: CallOverrides): Promise<BigNumber>;

  getDomainSeperator(overrides?: CallOverrides): Promise<string>;

  getElement(
    elementId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getImplementation(overrides?: CallOverrides): Promise<string>;

  getMaterial(
    materialId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getMiniumGreatness(
    relicId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getName(
    relicId: BigNumberish,
    materialId: BigNumberish,
    materialOffset: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getNonce(user: string, overrides?: CallOverrides): Promise<BigNumber>;

  getOrderIndex(
    relicId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getOrderSuffix(
    orderId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getPole(poleId: BigNumberish, overrides?: CallOverrides): Promise<string>;

  getRelicProperties(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<RelicPropertiesStructOutput>;

  getRelicType(
    relicId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  init(
    name: string,
    symbol: string,
    proxyRegistryAddress: string,
    placeholderImageURL: string,
    animationBaseURL: string,
    collectionName: string,
    collectionDesc: string,
    collectionImgURL: string,
    collectionExtURL: string,
    feeBasisPoints: BigNumberish,
    feeRecipient: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isApprovedForAll(
    owner: string,
    operator: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isMinterWhitelisted(
    minter: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  mint(
    to: string,
    tokenId: BigNumberish,
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  name(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  ownerOf(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

  packTokenMintInfo(
    relicMinter: string,
    data: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  removeWhitelistedMinter(
    minter: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceAdminPowers(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "safeTransferFrom(address,address,uint256)"(
    from: string,
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "safeTransferFrom(address,address,uint256,bytes)"(
    from: string,
    to: string,
    tokenId: BigNumberish,
    _data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setAdmin(
    newAdmin: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setAnimationBaseURL(
    animationBaseURL: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setApprovalForAll(
    operator: string,
    approved: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setCollectionDesc(
    collectionDesc: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setCollectionExtURL(
    collectionExtURL: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setCollectionImgURL(
    collectionImgURL: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setCollectionName(
    collectionName: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setFeeBasisPoints(
    feeBasisPoints: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setFeeRecipient(
    feeRecipient: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setImplementation(
    implementation: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPlaceholderImageURL(
    placeholderImageURL: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  symbol(overrides?: CallOverrides): Promise<string>;

  tokenURI(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

  transferFrom(
    from: string,
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unpackTokenMintInfo(
    mintInfo: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[string, string] & { relicMinter: string; data: string }>;

  callStatic: {
    ERC712_VERSION(overrides?: CallOverrides): Promise<string>;

    _animationBaseURL(overrides?: CallOverrides): Promise<string>;

    _collectionDesc(overrides?: CallOverrides): Promise<string>;

    _collectionExtURL(overrides?: CallOverrides): Promise<string>;

    _collectionImgURL(overrides?: CallOverrides): Promise<string>;

    _collectionName(overrides?: CallOverrides): Promise<string>;

    _feeBasisPoints(overrides?: CallOverrides): Promise<BigNumber>;

    _feeRecipient(overrides?: CallOverrides): Promise<string>;

    _getAttributes(
      relicProps: RelicPropertiesStruct,
      overrides?: CallOverrides
    ): Promise<string>;

    _getURLParams(
      relicProps: RelicPropertiesStruct,
      overrides?: CallOverrides
    ): Promise<string>;

    _placeholderImageURL(overrides?: CallOverrides): Promise<string>;

    _tokenMintInfo(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    addWhitelistedMinter(
      minter: string,
      overrides?: CallOverrides
    ): Promise<void>;

    admin(overrides?: CallOverrides): Promise<string>;

    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    burn(tokenId: BigNumberish, overrides?: CallOverrides): Promise<void>;

    contractURI(overrides?: CallOverrides): Promise<string>;

    executeMetaTransaction(
      userAddress: string,
      functionSignature: BytesLike,
      sigR: BytesLike,
      sigS: BytesLike,
      sigV: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    exists(tokenId: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

    getAlignment(
      alignmentId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getAstral(
      astralId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getChainId(overrides?: CallOverrides): Promise<BigNumber>;

    getDomainSeperator(overrides?: CallOverrides): Promise<string>;

    getElement(
      elementId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getImplementation(overrides?: CallOverrides): Promise<string>;

    getMaterial(
      materialId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getMiniumGreatness(
      relicId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getName(
      relicId: BigNumberish,
      materialId: BigNumberish,
      materialOffset: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getNonce(user: string, overrides?: CallOverrides): Promise<BigNumber>;

    getOrderIndex(
      relicId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOrderSuffix(
      orderId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getPole(poleId: BigNumberish, overrides?: CallOverrides): Promise<string>;

    getRelicProperties(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<RelicPropertiesStructOutput>;

    getRelicType(
      relicId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    init(
      name: string,
      symbol: string,
      proxyRegistryAddress: string,
      placeholderImageURL: string,
      animationBaseURL: string,
      collectionName: string,
      collectionDesc: string,
      collectionImgURL: string,
      collectionExtURL: string,
      feeBasisPoints: BigNumberish,
      feeRecipient: string,
      overrides?: CallOverrides
    ): Promise<void>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isMinterWhitelisted(
      minter: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    mint(
      to: string,
      tokenId: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    name(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    ownerOf(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

    packTokenMintInfo(
      relicMinter: string,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    removeWhitelistedMinter(
      minter: string,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceAdminPowers(overrides?: CallOverrides): Promise<void>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    setAdmin(newAdmin: string, overrides?: CallOverrides): Promise<void>;

    setAnimationBaseURL(
      animationBaseURL: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setCollectionDesc(
      collectionDesc: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setCollectionExtURL(
      collectionExtURL: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setCollectionImgURL(
      collectionImgURL: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setCollectionName(
      collectionName: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setFeeBasisPoints(
      feeBasisPoints: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setFeeRecipient(
      feeRecipient: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setImplementation(
      implementation: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setPlaceholderImageURL(
      placeholderImageURL: string,
      overrides?: CallOverrides
    ): Promise<void>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    symbol(overrides?: CallOverrides): Promise<string>;

    tokenURI(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    unpackTokenMintInfo(
      mintInfo: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, string] & { relicMinter: string; data: string }>;
  };

  filters: {
    "Approval(address,address,uint256)"(
      owner?: string | null,
      approved?: string | null,
      tokenId?: BigNumberish | null
    ): ApprovalEventFilter;
    Approval(
      owner?: string | null,
      approved?: string | null,
      tokenId?: BigNumberish | null
    ): ApprovalEventFilter;

    "ApprovalForAll(address,address,bool)"(
      owner?: string | null,
      operator?: string | null,
      approved?: null
    ): ApprovalForAllEventFilter;
    ApprovalForAll(
      owner?: string | null,
      operator?: string | null,
      approved?: null
    ): ApprovalForAllEventFilter;

    "MetaTransactionExecuted(address,address,bytes)"(
      userAddress?: null,
      relayerAddress?: null,
      functionSignature?: null
    ): MetaTransactionExecutedEventFilter;
    MetaTransactionExecuted(
      userAddress?: null,
      relayerAddress?: null,
      functionSignature?: null
    ): MetaTransactionExecutedEventFilter;

    "Transfer(address,address,uint256)"(
      from?: string | null,
      to?: string | null,
      tokenId?: BigNumberish | null
    ): TransferEventFilter;
    Transfer(
      from?: string | null,
      to?: string | null,
      tokenId?: BigNumberish | null
    ): TransferEventFilter;
  };

  estimateGas: {
    ERC712_VERSION(overrides?: CallOverrides): Promise<BigNumber>;

    _animationBaseURL(overrides?: CallOverrides): Promise<BigNumber>;

    _collectionDesc(overrides?: CallOverrides): Promise<BigNumber>;

    _collectionExtURL(overrides?: CallOverrides): Promise<BigNumber>;

    _collectionImgURL(overrides?: CallOverrides): Promise<BigNumber>;

    _collectionName(overrides?: CallOverrides): Promise<BigNumber>;

    _feeBasisPoints(overrides?: CallOverrides): Promise<BigNumber>;

    _feeRecipient(overrides?: CallOverrides): Promise<BigNumber>;

    _getAttributes(
      relicProps: RelicPropertiesStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _getURLParams(
      relicProps: RelicPropertiesStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _placeholderImageURL(overrides?: CallOverrides): Promise<BigNumber>;

    _tokenMintInfo(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    addWhitelistedMinter(
      minter: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    admin(overrides?: CallOverrides): Promise<BigNumber>;

    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    burn(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    contractURI(overrides?: CallOverrides): Promise<BigNumber>;

    executeMetaTransaction(
      userAddress: string,
      functionSignature: BytesLike,
      sigR: BytesLike,
      sigS: BytesLike,
      sigV: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    exists(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAlignment(
      alignmentId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAstral(
      astralId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getChainId(overrides?: CallOverrides): Promise<BigNumber>;

    getDomainSeperator(overrides?: CallOverrides): Promise<BigNumber>;

    getElement(
      elementId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getImplementation(overrides?: CallOverrides): Promise<BigNumber>;

    getMaterial(
      materialId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMiniumGreatness(
      relicId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getName(
      relicId: BigNumberish,
      materialId: BigNumberish,
      materialOffset: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNonce(user: string, overrides?: CallOverrides): Promise<BigNumber>;

    getOrderIndex(
      relicId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOrderSuffix(
      orderId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPole(
      poleId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRelicProperties(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRelicType(
      relicId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    init(
      name: string,
      symbol: string,
      proxyRegistryAddress: string,
      placeholderImageURL: string,
      animationBaseURL: string,
      collectionName: string,
      collectionDesc: string,
      collectionImgURL: string,
      collectionExtURL: string,
      feeBasisPoints: BigNumberish,
      feeRecipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isMinterWhitelisted(
      minter: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mint(
      to: string,
      tokenId: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    ownerOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    packTokenMintInfo(
      relicMinter: string,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    removeWhitelistedMinter(
      minter: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceAdminPowers(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setAdmin(
      newAdmin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setAnimationBaseURL(
      animationBaseURL: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setCollectionDesc(
      collectionDesc: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setCollectionExtURL(
      collectionExtURL: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setCollectionImgURL(
      collectionImgURL: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setCollectionName(
      collectionName: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setFeeBasisPoints(
      feeBasisPoints: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setFeeRecipient(
      feeRecipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setImplementation(
      implementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPlaceholderImageURL(
      placeholderImageURL: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    tokenURI(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unpackTokenMintInfo(
      mintInfo: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    ERC712_VERSION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _animationBaseURL(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _collectionDesc(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _collectionExtURL(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _collectionImgURL(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _collectionName(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _feeBasisPoints(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _feeRecipient(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _getAttributes(
      relicProps: RelicPropertiesStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _getURLParams(
      relicProps: RelicPropertiesStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _placeholderImageURL(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _tokenMintInfo(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    addWhitelistedMinter(
      minter: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    admin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    balanceOf(
      owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    burn(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    contractURI(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    executeMetaTransaction(
      userAddress: string,
      functionSignature: BytesLike,
      sigR: BytesLike,
      sigS: BytesLike,
      sigV: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    exists(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAlignment(
      alignmentId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAstral(
      astralId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getChainId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getDomainSeperator(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getElement(
      elementId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getImplementation(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getMaterial(
      materialId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMiniumGreatness(
      relicId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getName(
      relicId: BigNumberish,
      materialId: BigNumberish,
      materialOffset: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNonce(
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getOrderIndex(
      relicId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getOrderSuffix(
      orderId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPole(
      poleId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRelicProperties(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRelicType(
      relicId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    init(
      name: string,
      symbol: string,
      proxyRegistryAddress: string,
      placeholderImageURL: string,
      animationBaseURL: string,
      collectionName: string,
      collectionDesc: string,
      collectionImgURL: string,
      collectionExtURL: string,
      feeBasisPoints: BigNumberish,
      feeRecipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isMinterWhitelisted(
      minter: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mint(
      to: string,
      tokenId: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ownerOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    packTokenMintInfo(
      relicMinter: string,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    removeWhitelistedMinter(
      minter: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceAdminPowers(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setAdmin(
      newAdmin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setAnimationBaseURL(
      animationBaseURL: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setCollectionDesc(
      collectionDesc: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setCollectionExtURL(
      collectionExtURL: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setCollectionImgURL(
      collectionImgURL: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setCollectionName(
      collectionName: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setFeeBasisPoints(
      feeBasisPoints: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setFeeRecipient(
      feeRecipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setImplementation(
      implementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPlaceholderImageURL(
      placeholderImageURL: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenURI(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unpackTokenMintInfo(
      mintInfo: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}

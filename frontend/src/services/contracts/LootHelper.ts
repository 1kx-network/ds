/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface LootHelperInterface extends utils.Interface {
  functions: {
    "getItems(address,uint256)": FunctionFragment;
    "getItemsBatch(address,uint256[])": FunctionFragment;
    "getLootIds(address,address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "getItems",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getItemsBatch",
    values: [string, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getLootIds",
    values: [string, string]
  ): string;

  decodeFunctionResult(functionFragment: "getItems", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getItemsBatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getLootIds", data: BytesLike): Result;

  events: {};
}

export interface LootHelper extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: LootHelperInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getItems(
      lootContract: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    getItemsBatch(
      lootContract: string,
      tokenIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<[string[][]] & { items: string[][] }>;

    getLootIds(
      lootContract: string,
      account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]] & { lootIds: BigNumber[] }>;
  };

  getItems(
    lootContract: string,
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string[]>;

  getItemsBatch(
    lootContract: string,
    tokenIds: BigNumberish[],
    overrides?: CallOverrides
  ): Promise<string[][]>;

  getLootIds(
    lootContract: string,
    account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  callStatic: {
    getItems(
      lootContract: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string[]>;

    getItemsBatch(
      lootContract: string,
      tokenIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<string[][]>;

    getLootIds(
      lootContract: string,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;
  };

  filters: {};

  estimateGas: {
    getItems(
      lootContract: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getItemsBatch(
      lootContract: string,
      tokenIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLootIds(
      lootContract: string,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getItems(
      lootContract: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getItemsBatch(
      lootContract: string,
      tokenIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLootIds(
      lootContract: string,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}

/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.1.4 ./grass.glb --types
*/

import * as THREE from 'three';
import React, { useMemo, useRef } from 'react';
import { useGLTF } from '@react-three/drei';
import { GLTF } from 'three-stdlib';
import { useGraph } from '@react-three/fiber';
import * as SkeletonUtils from 'three/examples/jsm/utils/SkeletonUtils.js';

function useSkinnedMeshClone(path: string) {
    const { scene, materials, animations } = useGLTF(path) as GLTFResult;
    const clonedScene = useMemo(() => SkeletonUtils.clone(scene), [scene]);
    const { nodes } = useGraph(clonedScene);

    return { scene: clonedScene, materials, animations, nodes };
}

type GLTFResult = GLTF & {
    nodes: {
        grass: THREE.Mesh;
    };
    materials: {
        foliage: THREE.MeshStandardMaterial;
    };
};

export function Model(props: JSX.IntrinsicElements['group']) {
    const { nodes, materials } = useSkinnedMeshClone('/grass.glb') as GLTFResult;
    return (
        <group {...props} dispose={null} scale={0.7}>
            <mesh geometry={nodes.grass.geometry} material={materials.foliage} scale={0.75}>
                <meshPhongMaterial color={'#259e63'} opacity={0} transparent={true} />
            </mesh>
        </group>
    );
}

useGLTF.preload('/grass.glb');

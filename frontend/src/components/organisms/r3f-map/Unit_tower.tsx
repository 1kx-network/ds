/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.1.4 ./unit_tower.glb --types
*/

import { useGLTF } from '@react-three/drei';
import { useGraph } from '@react-three/fiber';
import { useMemo } from 'react';
import * as THREE from 'three';
import { GLTF } from 'three-stdlib';
import * as SkeletonUtils from 'three/examples/jsm/utils/SkeletonUtils.js';

function useSkinnedMeshClone(path: string) {
    const { scene, materials, animations } = useGLTF(path) as GLTFResult;
    const clonedScene = useMemo(() => SkeletonUtils.clone(scene), [scene]);
    const { nodes } = useGraph(clonedScene);

    return { scene: clonedScene, materials, animations, nodes };
}

type GLTFResult = GLTF & {
    nodes: {
        Mesh_unit_tower: THREE.Mesh;
        Mesh_unit_tower_1: THREE.Mesh;
        Mesh_unit_tower_2: THREE.Mesh;
        Mesh_unit_tower_3: THREE.Mesh;
    };
    materials: {
        stone: THREE.MeshStandardMaterial;
        dirt: THREE.MeshStandardMaterial;
        wood: THREE.MeshStandardMaterial;
        roof: THREE.MeshStandardMaterial;
    };
};

export function Model(props: JSX.IntrinsicElements['group']) {
    const { nodes, materials } = useSkinnedMeshClone('/unit_tower.glb') as GLTFResult;
    return (
        <group {...props} dispose={null}>
            <mesh geometry={nodes.Mesh_unit_tower.geometry} material={materials.stone}>
                <meshPhongMaterial color={'#647591'} />
            </mesh>
            <mesh geometry={nodes.Mesh_unit_tower_1.geometry} material={materials.dirt}>
                <meshPhongMaterial color={'#7a8db0'} />
            </mesh>
            <mesh geometry={nodes.Mesh_unit_tower_2.geometry} material={materials.wood}>
                <meshPhongMaterial color={'#7a8db0'} />
            </mesh>
            <mesh geometry={nodes.Mesh_unit_tower_3.geometry} material={materials.roof}>
                <meshPhongMaterial color={'#7a8db0'} />
            </mesh>
        </group>
    );
}

useGLTF.preload('/unit_tower.glb');

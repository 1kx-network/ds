/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.1.4 ./blockyman.glb --types
*/

import * as THREE from 'three';
import React, { useMemo } from 'react';
import { useGLTF } from '@react-three/drei';
import { GLTF } from 'three-stdlib';
import * as SkeletonUtils from 'three/examples/jsm/utils/SkeletonUtils.js';
import { useGraph } from '@react-three/fiber';

function useSkinnedMeshClone(path: string) {
    const { scene, materials, animations } = useGLTF(path) as GLTFResult;
    const clonedScene = useMemo(() => SkeletonUtils.clone(scene), [scene]);
    const { nodes } = useGraph(clonedScene);

    return { scene: clonedScene, materials, animations, nodes };
}

type GLTFResult = GLTF & {
    nodes: {
        ArmLeft1: THREE.SkinnedMesh;
        ArmRight1: THREE.SkinnedMesh;
        Body1: THREE.SkinnedMesh;
        Head1: THREE.SkinnedMesh;
        LegLeft1: THREE.SkinnedMesh;
        LegRight1: THREE.SkinnedMesh;
        Rig1: THREE.Bone;
    };
    materials: {
        lambert1: THREE.MeshStandardMaterial;
    };
};

type GroupProps = JSX.IntrinsicElements['group'];

interface ModelProps extends GroupProps {
    color: string;
}

export function Model({ color, onClick, ...groupProps }: ModelProps) {
    const { nodes, materials } = useSkinnedMeshClone('/blockyman.glb') as GLTFResult;
    return (
        <group {...groupProps} dispose={null} onClick={onClick}>
            <group rotation={[Math.PI / 2, 0, 0]} scale={0.01}>
                <primitive object={nodes.Rig1} />
                <skinnedMesh
                    geometry={nodes.ArmLeft1.geometry}
                    material={materials.lambert1}
                    skeleton={nodes.ArmLeft1.skeleton}
                    onClick={onClick}
                >
                    <meshPhongMaterial color={color} />
                </skinnedMesh>
                <skinnedMesh
                    geometry={nodes.ArmRight1.geometry}
                    material={materials.lambert1}
                    skeleton={nodes.ArmRight1.skeleton}
                    onClick={onClick}
                >
                    <meshPhongMaterial color={color} />
                </skinnedMesh>
                <skinnedMesh
                    geometry={nodes.Body1.geometry}
                    material={materials.lambert1}
                    skeleton={nodes.Body1.skeleton}
                    onClick={onClick}
                >
                    <meshPhongMaterial color={color} />
                </skinnedMesh>
                <skinnedMesh
                    geometry={nodes.Head1.geometry}
                    material={materials.lambert1}
                    skeleton={nodes.Head1.skeleton}
                    onClick={onClick}
                >
                    <meshPhongMaterial color={color} />
                </skinnedMesh>
                <skinnedMesh
                    geometry={nodes.LegLeft1.geometry}
                    material={materials.lambert1}
                    skeleton={nodes.LegLeft1.skeleton}
                    onClick={onClick}
                >
                    <meshPhongMaterial color={color} />
                </skinnedMesh>
                <skinnedMesh
                    geometry={nodes.LegRight1.geometry}
                    material={materials.lambert1}
                    skeleton={nodes.LegRight1.skeleton}
                    onClick={onClick}
                >
                    <meshPhongMaterial color={color} />
                </skinnedMesh>
            </group>
        </group>
    );
}

useGLTF.preload('/blockyman.glb');
